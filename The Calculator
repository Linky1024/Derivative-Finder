#include <iostream>
#include <cmath>

using namespace std;

string monomial(string input){
    if (input.find("x") != string::npos || input.find("X") != string::npos){
        int xplace = input.find("x");
        string constant;
        if (xplace != 0){
            constant = input.substr(0, (xplace));
            if (constant == "-"){
                constant = "-1";
            }
        } else if (xplace == 0){
            constant = "1";
        }
        string cfnum;
        string cfden;
        if (constant.find("/") != string::npos){
            cfnum = constant.substr(1, (constant.find("/")) - 1);
            cfden = constant.substr(constant.find("/") + 1, constant.length() - 4);
        }
        if (input.find("^") == string::npos){
            return constant;
        } else if (input.find("^") != string::npos){
            int eplace = input.find("^");
            string exponent = input.substr((eplace + 1), (input.find(")"), eplace));
            if (exponent.find("(") == string::npos && exponent.find("/") == string::npos){
                if ((stoi(exponent) - 1) == 1 && constant.find("/") == string::npos){
                    return (to_string(stoi(constant) * stoi(exponent)) + "x");
                } else if ((stoi(exponent) - 1) == 1 && constant.find("/") != string::npos){
                    int n1;
                    int n2;
                    int gcf = -1;
                    if (n1 < 0 && n2 < 0){
                        n1 = abs(n1);
                        n2 = abs(n2);
                    }
                    if ((stoi(cfnum) * stoi(exponent)) > stoi(cfden)){
                        n2 = stoi(cfden);
                        n1 = (stoi(cfnum) * stoi(exponent));
                    } else if (stoi(cfden) > (stoi(cfnum) * stoi(exponent))){
                        n2 = (stoi(cfnum) * stoi(exponent));
                        n1 = stoi(cfden);
                    }
                    for (int i = n2; i > 1; i--){
                        if (n2 % i == 0 && n1 % i == 0){
                            gcf = i;
                            break;
                        }
                    }
                    if((stoi(cfnum) * stoi(exponent)) % stoi(cfden) == 0){
                        return (to_string((stoi(cfnum) * stoi(exponent)) / stoi(cfden)) + "x");
                    } else if (gcf != -1){
                        return ("(" + to_string((stoi(cfnum) * stoi(exponent)) / gcf) + "/" + to_string(stoi(cfden) / gcf) + ")x");
                    } else {
                        return ("(" + to_string(stoi(cfnum) * stoi(exponent)) + "/" + cfden + ")x");
                    }
                } else if (constant.find("/") != string::npos){
                    int n1;
                    int n2;
                    int gcf = -1;
                    if ((stoi(cfnum) * stoi(exponent)) > stoi(cfden)){
                        n2 = stoi(cfden);
                        n1 = (stoi(cfnum) * stoi(exponent));
                    } else if (stoi(cfden) > (stoi(cfnum) * stoi(exponent))){
                        n2 = (stoi(cfnum) * stoi(exponent));
                        n1 = stoi(cfden);
                    }
                    for (int i = n2; i > 1; i--){
                        if (n2 % i == 0 && n1 % i == 0){
                            gcf = i;
                            break;
                        }
                    }
                    if (stoi(cfnum) < 0 && stoi(cfden) < 0){
                        cfnum = to_string(abs(stoi(cfnum)));
                        cfden = to_string(abs(stoi(cfden)));
                    }
                    if((stoi(cfnum) * stoi(exponent)) % stoi(cfden) == 0){
                        return (to_string((stoi(cfnum) * stoi(exponent)) / stoi(cfden)) + "x^" + to_string(stoi(exponent) - 1));
                    } else if (gcf != -1){
                        return ("(" + to_string((stoi(cfnum) * stoi(exponent)) / gcf) + "/" + to_string(stoi(cfden) / gcf) + ")x^" + to_string(stoi(exponent) - 1));
                    } else {
                        return ("(" + to_string(stoi(cfnum) * stoi(exponent)) + "/" + cfden + ")x^" + to_string(stoi(exponent) - 1));
                    }
                } else {
                    return (to_string(stoi(constant) * stoi(exponent)) + "x^(" + to_string(stoi(exponent) - 1) + ")");
                }
            } else if (exponent.find("(") != string::npos && exponent.find("/") == string::npos) {
                string expminpar = exponent.substr(exponent.find("(") + 1, exponent.find(")") - 1);
                int n1;
                int n2;
                int gcf = -1;
                if ((stoi(cfnum) * stoi(expminpar)) > stoi(cfden)){
                    n2 = stoi(cfden);
                    n1 = (stoi(cfnum) * stoi(expminpar));
                } else if (stoi(cfden) > (stoi(cfnum) * stoi(expminpar))){
                    n2 = (stoi(cfnum) * stoi(expminpar));
                    n1 = stoi(cfden);
                }
                for (int i = n2; i > 1; i--){
                    if (n2 % i == 0 && n1 % i == 0){
                        gcf = i;
                        break;
                    }
                }
                if (stoi(cfnum) < 0 && stoi(cfden) < 0){
                    cfnum = to_string(abs(stoi(cfnum)));
                    cfden = to_string(abs(stoi(cfden)));
                }
                if ((stoi(expminpar) - 1) == 1 && constant.find("/") == string::npos){
                    return (to_string(stoi(constant) * stoi(expminpar)) + "x");
                } else if ((stoi(expminpar) - 1) == 1 && constant.find("/") != string::npos && (stoi(cfnum) * stoi(expminpar)) % stoi(cfden) != 0 && gcf == -1){
                    return ("(" + to_string(stoi(cfnum) * stoi(expminpar)) + "/" + cfden + ")x");
                } else if ((stoi(expminpar) - 1) == 1 && constant.find("/") != string::npos && (stoi(cfnum) * stoi(expminpar)) % stoi(cfden) == 0){
                    return (to_string((stoi(cfnum) * stoi(expminpar)) / stoi(cfden)) + "x");
                } else if ((stoi(expminpar) - 1) == 1 && constant.find("/") != string::npos && gcf != -1){
                    return ("(" + to_string((stoi(cfnum) * stoi(expminpar)) / gcf) + "/" + to_string(stoi(cfden) / gcf) + ")x");
                } else if (constant.find("/") != string::npos && (stoi(cfnum) * stoi(expminpar)) % stoi(cfden) != 0 && gcf == -1){
                    return ("(" + to_string(stoi(cfnum) * stoi(expminpar)) + "/" + cfden + ")x^(" + to_string(stoi(expminpar) - 1) + ")");
                } else if (constant.find("/") != string::npos && (stoi(cfnum) * stoi(expminpar)) % stoi(cfden) == 0){
                    return (to_string((stoi(cfnum) * stoi(expminpar)) / stoi(cfden)) + "x^(" + to_string(stoi(expminpar) - 1) + ")");
                } else if (constant.find("/") != string::npos && gcf != -1){
                    return ("(" + to_string((stoi(cfnum) * stoi(expminpar)) / gcf) + "/" + to_string(stoi(cfden) / gcf) + ")x^(" + to_string(stoi(expminpar) - 1) + ")");
                } else {
                    return (to_string(stoi(constant) * stoi(expminpar)) + "x^(" + to_string(stoi(expminpar) - 1) + ")");
                }
            } else if (exponent.find("(") != string::npos && exponent.find("/") != string::npos) {
                if (constant.find("/") == string::npos){
                    string expminpar = exponent.substr(exponent.find("(") + 1, exponent.find(")") - 1);
                    string num = expminpar.substr(0, expminpar.find("/"));
                    string den1 = expminpar.substr(expminpar.find("/") + 1, expminpar.length() - 1);
                    int den = stoi(den1);
                    int numc = stoi(constant) * stoi(num);
                    string cfrac;
                    int n1;
                    int n2;
                    int gcf = -1;
                    if (numc > den){
                        n2 = den;
                        n1 = numc;
                    } else if (den > numc){
                        n2 = numc;
                        n1 = den;
                    }
                    for (int i = n2; i > 1; i--){
                        if (n2 % i == 0 && n1 % i == 0){
                            gcf = i;
                            break;
                        }
                    }
                    int denc = den;
                    if (numc < 0 && denc < 0){
                        numc = abs(numc);
                        denc = abs(den);
                    }
                    if (stoi(num) < 0 && den < 0){
                        num = abs(stoi(num));
                        den = abs(den);
                    }
                    if (numc % den == 0){
                        cfrac = to_string(numc / denc);
                    } else if (gcf != -1){
                        cfrac = "(" + to_string(numc / gcf) + "/" + to_string(denc / gcf) + ")";
                    } else {
                        cfrac = "(" + to_string(numc) + "/" + to_string(denc) + ")";
                    }
                    int nnum = stoi(num) - (den);
                    string newfrac = to_string(nnum) + "/" + to_string(den);
                    return (cfrac + "x^(" + newfrac + ")");
                } else if (constant.find("/") != string::npos){
                    string expminpar = exponent.substr(exponent.find("(") + 1, exponent.find(")") - 1);
                    string num = expminpar.substr(0, expminpar.find("/"));
                    string den = expminpar.substr(expminpar.find("/") + 1, expminpar.length() - 1);
                    int numc = stoi(cfnum) * stoi(num);
                    int denc = stoi(cfden) * stoi(den);
                    string cfrac;
                    int n1;
                    int n2;
                    int gcf = -1;
                    if (numc > denc){
                        n2 = denc;
                        n1 = numc;
                    } else if (denc > numc){
                        n2 = numc;
                        n1 = denc;
                    }
                    for (int i = n2; i > 1; i--){
                        if (n2 % i == 0 && n1 % i == 0){
                            gcf = i;
                            break;
                        }
                    }
                    if (numc < 0 && denc < 0){
                        numc = abs(numc);
                        denc = abs(denc);
                    }
                    int numm = stoi(num);
                    int denn = stoi(den);
                    if (numm < 0 && denn < 0){
                        num = to_string(abs(numm));
                        den = to_string(abs(denn));
                    }
                    if (numc % denc == 0){
                        cfrac = to_string(numc / denc);
                    } else if (gcf != -1){
                        cfrac = "(" + to_string(numc / gcf) + "/" + to_string(denc / gcf) + ")";
                    } else {
                        cfrac = "(" + to_string(numc) + "/" + to_string(denc) + ")";
                    }
                    int nnum = stoi(num) - stoi(den);
                    string newfrac = to_string(nnum) + "/" + den;
                    return (cfrac + "x^(" + newfrac + ")");
                }
            }
        }
     } else {
        return "0";
    }
}

int main(){
    char c;
    cout << "What would you like to find the derivative of?" << endl << "M - Basic Monomial (cx^(n))" << endl << "P - Basic Polynomial (cx^(n)+cx^(n))" << endl;
    for (int i = 0; i < 1;){
        cin >> c;
        if (c == 'M' || c == 'm'){
            i++;
            string input;
            cout << "Okay, please enter your monomial. (Put fractions and exponents in parenthases)" << endl;
            cin >> input;
            cout << monomial(input) << endl;
        } else if (c == 'P' || c == 'p'){
            i++;
            string input;
            cout << "Okay, please enter your polynomial. (Put fractions and exponents in parenthases)" << endl;
            cin >> input;
            char l [10][2] = {{'a','a'},{'a','a'},{'a','a'},{'a','a'},{'a','a'},{'a','a'},{'a','a'},{'a','a'},{'a','a'},{'a','a'}};
            int p = 0;
            string sl [20];
            for (int o = 0; o < input.length(); o++){
                if (input[o] == '+'){
                    l[p][0] = char(o);
                    l[p][1] = '+';
                    p++;
                } else if (input[o] == '-' && input[o - 1] == ')'){
                    l[p][0] = char(o);
                    l[p][1] = '-';
                    p++;
                }
            }
            if (input.find(")-") != string::npos || input.find("+") != string::npos){
                sl[0] = input.substr(0, l[0][0]);
                cout << monomial(sl[0]);
                for (int h = 0; h < 20; h++){
                    if (l[h + 1][0] != 'a'){
                        sl[h] = input.substr(l[h][0] + 1, l[h + 1][0]);
                        cout << l[h][1] << monomial(sl[h]);
                    } else {
                        sl[h] = input.substr(l[h][0] + 1, input.length() - 1);
                        cout << l[h][1] << monomial(sl[h]);
                        break;
                    }
                }
            } else {
                cout << monomial(input);
            }
            
        } else {
            cout << "Please submit a proper option" << endl;
        }
    }
    return 0;
}
